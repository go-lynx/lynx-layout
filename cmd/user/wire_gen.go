// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-lynx/lynx-layout/internal/biz"
	"github.com/go-lynx/lynx-layout/internal/data"
	"github.com/go-lynx/lynx-layout/internal/server"
	"github.com/go-lynx/lynx-layout/internal/service"
	"github.com/go-lynx/lynx/app"
	"github.com/go-lynx/lynx/conf"
	"github.com/go-lynx/lynx/plugin/db"
	kratos2 "github.com/go-lynx/lynx/plugin/kratos"
	"github.com/go-lynx/lynx/plugin/redis"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(lynx *conf.Lynx, logger log.Logger) (*kratos.App, error) {
	driver := db.GetDriver()
	client := redis.GetRedis()
	dataData, err := data.NewData(driver, client, logger)
	if err != nil {
		return nil, err
	}
	loginRepo := data.NewLoginRepo(dataData, logger)
	loginUseCase := biz.NewLoginUseCase(loginRepo, logger)
	loginService := service.NewLoginService(loginUseCase)
	grpcServer := server.NewGRPCServer(loginService)
	httpServer := server.NewHTTPServer(loginService)
	registrar := app.ServiceRegistry()
	kratosApp := kratos2.NewKratos(logger, grpcServer, httpServer, registrar)
	return kratosApp, nil
}
