// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-lynx/lynx-layout/internal/data/ent/banrecord"
	"github.com/go-lynx/lynx-layout/internal/data/ent/predicate"
)

// BanRecordUpdate is the builder for updating BanRecord entities.
type BanRecordUpdate struct {
	config
	hooks    []Hook
	mutation *BanRecordMutation
}

// Where appends a list predicates to the BanRecordUpdate builder.
func (bru *BanRecordUpdate) Where(ps ...predicate.BanRecord) *BanRecordUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetBanCode sets the "ban_code" field.
func (bru *BanRecordUpdate) SetBanCode(s string) *BanRecordUpdate {
	bru.mutation.SetBanCode(s)
	return bru
}

// SetNillableBanCode sets the "ban_code" field if the given value is not nil.
func (bru *BanRecordUpdate) SetNillableBanCode(s *string) *BanRecordUpdate {
	if s != nil {
		bru.SetBanCode(*s)
	}
	return bru
}

// SetBanNote sets the "ban_note" field.
func (bru *BanRecordUpdate) SetBanNote(s string) *BanRecordUpdate {
	bru.mutation.SetBanNote(s)
	return bru
}

// SetNillableBanNote sets the "ban_note" field if the given value is not nil.
func (bru *BanRecordUpdate) SetNillableBanNote(s *string) *BanRecordUpdate {
	if s != nil {
		bru.SetBanNote(*s)
	}
	return bru
}

// SetReleaseAt sets the "release_at" field.
func (bru *BanRecordUpdate) SetReleaseAt(t time.Time) *BanRecordUpdate {
	bru.mutation.SetReleaseAt(t)
	return bru
}

// SetReleaseNote sets the "release_note" field.
func (bru *BanRecordUpdate) SetReleaseNote(s string) *BanRecordUpdate {
	bru.mutation.SetReleaseNote(s)
	return bru
}

// SetNillableReleaseNote sets the "release_note" field if the given value is not nil.
func (bru *BanRecordUpdate) SetNillableReleaseNote(s *string) *BanRecordUpdate {
	if s != nil {
		bru.SetReleaseNote(*s)
	}
	return bru
}

// SetCreatedAt sets the "created_at" field.
func (bru *BanRecordUpdate) SetCreatedAt(t time.Time) *BanRecordUpdate {
	bru.mutation.SetCreatedAt(t)
	return bru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bru *BanRecordUpdate) SetNillableCreatedAt(t *time.Time) *BanRecordUpdate {
	if t != nil {
		bru.SetCreatedAt(*t)
	}
	return bru
}

// SetUpdatedAt sets the "updated_at" field.
func (bru *BanRecordUpdate) SetUpdatedAt(t time.Time) *BanRecordUpdate {
	bru.mutation.SetUpdatedAt(t)
	return bru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bru *BanRecordUpdate) SetNillableUpdatedAt(t *time.Time) *BanRecordUpdate {
	if t != nil {
		bru.SetUpdatedAt(*t)
	}
	return bru
}

// Mutation returns the BanRecordMutation object of the builder.
func (bru *BanRecordUpdate) Mutation() *BanRecordMutation {
	return bru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BanRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BanRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BanRecordUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BanRecordUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bru *BanRecordUpdate) check() error {
	if v, ok := bru.mutation.BanCode(); ok {
		if err := banrecord.BanCodeValidator(v); err != nil {
			return &ValidationError{Name: "ban_code", err: fmt.Errorf(`ent: validator failed for field "BanRecord.ban_code": %w`, err)}
		}
	}
	if v, ok := bru.mutation.BanNote(); ok {
		if err := banrecord.BanNoteValidator(v); err != nil {
			return &ValidationError{Name: "ban_note", err: fmt.Errorf(`ent: validator failed for field "BanRecord.ban_note": %w`, err)}
		}
	}
	if v, ok := bru.mutation.ReleaseNote(); ok {
		if err := banrecord.ReleaseNoteValidator(v); err != nil {
			return &ValidationError{Name: "release_note", err: fmt.Errorf(`ent: validator failed for field "BanRecord.release_note": %w`, err)}
		}
	}
	return nil
}

func (bru *BanRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(banrecord.Table, banrecord.Columns, sqlgraph.NewFieldSpec(banrecord.FieldID, field.TypeInt64))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.BanCode(); ok {
		_spec.SetField(banrecord.FieldBanCode, field.TypeString, value)
	}
	if value, ok := bru.mutation.BanNote(); ok {
		_spec.SetField(banrecord.FieldBanNote, field.TypeString, value)
	}
	if value, ok := bru.mutation.ReleaseAt(); ok {
		_spec.SetField(banrecord.FieldReleaseAt, field.TypeTime, value)
	}
	if value, ok := bru.mutation.ReleaseNote(); ok {
		_spec.SetField(banrecord.FieldReleaseNote, field.TypeString, value)
	}
	if value, ok := bru.mutation.CreatedAt(); ok {
		_spec.SetField(banrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bru.mutation.UpdatedAt(); ok {
		_spec.SetField(banrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BanRecordUpdateOne is the builder for updating a single BanRecord entity.
type BanRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BanRecordMutation
}

// SetBanCode sets the "ban_code" field.
func (bruo *BanRecordUpdateOne) SetBanCode(s string) *BanRecordUpdateOne {
	bruo.mutation.SetBanCode(s)
	return bruo
}

// SetNillableBanCode sets the "ban_code" field if the given value is not nil.
func (bruo *BanRecordUpdateOne) SetNillableBanCode(s *string) *BanRecordUpdateOne {
	if s != nil {
		bruo.SetBanCode(*s)
	}
	return bruo
}

// SetBanNote sets the "ban_note" field.
func (bruo *BanRecordUpdateOne) SetBanNote(s string) *BanRecordUpdateOne {
	bruo.mutation.SetBanNote(s)
	return bruo
}

// SetNillableBanNote sets the "ban_note" field if the given value is not nil.
func (bruo *BanRecordUpdateOne) SetNillableBanNote(s *string) *BanRecordUpdateOne {
	if s != nil {
		bruo.SetBanNote(*s)
	}
	return bruo
}

// SetReleaseAt sets the "release_at" field.
func (bruo *BanRecordUpdateOne) SetReleaseAt(t time.Time) *BanRecordUpdateOne {
	bruo.mutation.SetReleaseAt(t)
	return bruo
}

// SetReleaseNote sets the "release_note" field.
func (bruo *BanRecordUpdateOne) SetReleaseNote(s string) *BanRecordUpdateOne {
	bruo.mutation.SetReleaseNote(s)
	return bruo
}

// SetNillableReleaseNote sets the "release_note" field if the given value is not nil.
func (bruo *BanRecordUpdateOne) SetNillableReleaseNote(s *string) *BanRecordUpdateOne {
	if s != nil {
		bruo.SetReleaseNote(*s)
	}
	return bruo
}

// SetCreatedAt sets the "created_at" field.
func (bruo *BanRecordUpdateOne) SetCreatedAt(t time.Time) *BanRecordUpdateOne {
	bruo.mutation.SetCreatedAt(t)
	return bruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bruo *BanRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *BanRecordUpdateOne {
	if t != nil {
		bruo.SetCreatedAt(*t)
	}
	return bruo
}

// SetUpdatedAt sets the "updated_at" field.
func (bruo *BanRecordUpdateOne) SetUpdatedAt(t time.Time) *BanRecordUpdateOne {
	bruo.mutation.SetUpdatedAt(t)
	return bruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bruo *BanRecordUpdateOne) SetNillableUpdatedAt(t *time.Time) *BanRecordUpdateOne {
	if t != nil {
		bruo.SetUpdatedAt(*t)
	}
	return bruo
}

// Mutation returns the BanRecordMutation object of the builder.
func (bruo *BanRecordUpdateOne) Mutation() *BanRecordMutation {
	return bruo.mutation
}

// Where appends a list predicates to the BanRecordUpdate builder.
func (bruo *BanRecordUpdateOne) Where(ps ...predicate.BanRecord) *BanRecordUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BanRecordUpdateOne) Select(field string, fields ...string) *BanRecordUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BanRecord entity.
func (bruo *BanRecordUpdateOne) Save(ctx context.Context) (*BanRecord, error) {
	return withHooks(ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BanRecordUpdateOne) SaveX(ctx context.Context) *BanRecord {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BanRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BanRecordUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bruo *BanRecordUpdateOne) check() error {
	if v, ok := bruo.mutation.BanCode(); ok {
		if err := banrecord.BanCodeValidator(v); err != nil {
			return &ValidationError{Name: "ban_code", err: fmt.Errorf(`ent: validator failed for field "BanRecord.ban_code": %w`, err)}
		}
	}
	if v, ok := bruo.mutation.BanNote(); ok {
		if err := banrecord.BanNoteValidator(v); err != nil {
			return &ValidationError{Name: "ban_note", err: fmt.Errorf(`ent: validator failed for field "BanRecord.ban_note": %w`, err)}
		}
	}
	if v, ok := bruo.mutation.ReleaseNote(); ok {
		if err := banrecord.ReleaseNoteValidator(v); err != nil {
			return &ValidationError{Name: "release_note", err: fmt.Errorf(`ent: validator failed for field "BanRecord.release_note": %w`, err)}
		}
	}
	return nil
}

func (bruo *BanRecordUpdateOne) sqlSave(ctx context.Context) (_node *BanRecord, err error) {
	if err := bruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(banrecord.Table, banrecord.Columns, sqlgraph.NewFieldSpec(banrecord.FieldID, field.TypeInt64))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BanRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banrecord.FieldID)
		for _, f := range fields {
			if !banrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != banrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.BanCode(); ok {
		_spec.SetField(banrecord.FieldBanCode, field.TypeString, value)
	}
	if value, ok := bruo.mutation.BanNote(); ok {
		_spec.SetField(banrecord.FieldBanNote, field.TypeString, value)
	}
	if value, ok := bruo.mutation.ReleaseAt(); ok {
		_spec.SetField(banrecord.FieldReleaseAt, field.TypeTime, value)
	}
	if value, ok := bruo.mutation.ReleaseNote(); ok {
		_spec.SetField(banrecord.FieldReleaseNote, field.TypeString, value)
	}
	if value, ok := bruo.mutation.CreatedAt(); ok {
		_spec.SetField(banrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bruo.mutation.UpdatedAt(); ok {
		_spec.SetField(banrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &BanRecord{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
