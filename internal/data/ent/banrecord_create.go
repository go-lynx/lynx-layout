// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/go-lynx/lynx-layout/internal/data/ent/banrecord"
)

// BanRecordCreate is the builder for creating a BanRecord entity.
type BanRecordCreate struct {
	config
	mutation *BanRecordMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (brc *BanRecordCreate) SetUserID(i int64) *BanRecordCreate {
	brc.mutation.SetUserID(i)
	return brc
}

// SetBanCode sets the "ban_code" field.
func (brc *BanRecordCreate) SetBanCode(s string) *BanRecordCreate {
	brc.mutation.SetBanCode(s)
	return brc
}

// SetNillableBanCode sets the "ban_code" field if the given value is not nil.
func (brc *BanRecordCreate) SetNillableBanCode(s *string) *BanRecordCreate {
	if s != nil {
		brc.SetBanCode(*s)
	}
	return brc
}

// SetBanNote sets the "ban_note" field.
func (brc *BanRecordCreate) SetBanNote(s string) *BanRecordCreate {
	brc.mutation.SetBanNote(s)
	return brc
}

// SetNillableBanNote sets the "ban_note" field if the given value is not nil.
func (brc *BanRecordCreate) SetNillableBanNote(s *string) *BanRecordCreate {
	if s != nil {
		brc.SetBanNote(*s)
	}
	return brc
}

// SetReleaseAt sets the "release_at" field.
func (brc *BanRecordCreate) SetReleaseAt(t time.Time) *BanRecordCreate {
	brc.mutation.SetReleaseAt(t)
	return brc
}

// SetReleaseNote sets the "release_note" field.
func (brc *BanRecordCreate) SetReleaseNote(s string) *BanRecordCreate {
	brc.mutation.SetReleaseNote(s)
	return brc
}

// SetNillableReleaseNote sets the "release_note" field if the given value is not nil.
func (brc *BanRecordCreate) SetNillableReleaseNote(s *string) *BanRecordCreate {
	if s != nil {
		brc.SetReleaseNote(*s)
	}
	return brc
}

// SetCreatedAt sets the "created_at" field.
func (brc *BanRecordCreate) SetCreatedAt(t time.Time) *BanRecordCreate {
	brc.mutation.SetCreatedAt(t)
	return brc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (brc *BanRecordCreate) SetNillableCreatedAt(t *time.Time) *BanRecordCreate {
	if t != nil {
		brc.SetCreatedAt(*t)
	}
	return brc
}

// SetUpdatedAt sets the "updated_at" field.
func (brc *BanRecordCreate) SetUpdatedAt(t time.Time) *BanRecordCreate {
	brc.mutation.SetUpdatedAt(t)
	return brc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (brc *BanRecordCreate) SetNillableUpdatedAt(t *time.Time) *BanRecordCreate {
	if t != nil {
		brc.SetUpdatedAt(*t)
	}
	return brc
}

// SetID sets the "id" field.
func (brc *BanRecordCreate) SetID(i int64) *BanRecordCreate {
	brc.mutation.SetID(i)
	return brc
}

// Mutation returns the BanRecordMutation object of the builder.
func (brc *BanRecordCreate) Mutation() *BanRecordMutation {
	return brc.mutation
}

// Save creates the BanRecord in the database.
func (brc *BanRecordCreate) Save(ctx context.Context) (*BanRecord, error) {
	brc.defaults()
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BanRecordCreate) SaveX(ctx context.Context) *BanRecord {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BanRecordCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BanRecordCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (brc *BanRecordCreate) defaults() {
	if _, ok := brc.mutation.BanCode(); !ok {
		v := banrecord.DefaultBanCode
		brc.mutation.SetBanCode(v)
	}
	if _, ok := brc.mutation.BanNote(); !ok {
		v := banrecord.DefaultBanNote
		brc.mutation.SetBanNote(v)
	}
	if _, ok := brc.mutation.ReleaseNote(); !ok {
		v := banrecord.DefaultReleaseNote
		brc.mutation.SetReleaseNote(v)
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		v := banrecord.DefaultCreatedAt()
		brc.mutation.SetCreatedAt(v)
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		v := banrecord.DefaultUpdatedAt()
		brc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BanRecordCreate) check() error {
	if _, ok := brc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "BanRecord.user_id"`)}
	}
	if _, ok := brc.mutation.BanCode(); !ok {
		return &ValidationError{Name: "ban_code", err: errors.New(`ent: missing required field "BanRecord.ban_code"`)}
	}
	if v, ok := brc.mutation.BanCode(); ok {
		if err := banrecord.BanCodeValidator(v); err != nil {
			return &ValidationError{Name: "ban_code", err: fmt.Errorf(`ent: validator failed for field "BanRecord.ban_code": %w`, err)}
		}
	}
	if _, ok := brc.mutation.BanNote(); !ok {
		return &ValidationError{Name: "ban_note", err: errors.New(`ent: missing required field "BanRecord.ban_note"`)}
	}
	if v, ok := brc.mutation.BanNote(); ok {
		if err := banrecord.BanNoteValidator(v); err != nil {
			return &ValidationError{Name: "ban_note", err: fmt.Errorf(`ent: validator failed for field "BanRecord.ban_note": %w`, err)}
		}
	}
	if _, ok := brc.mutation.ReleaseAt(); !ok {
		return &ValidationError{Name: "release_at", err: errors.New(`ent: missing required field "BanRecord.release_at"`)}
	}
	if _, ok := brc.mutation.ReleaseNote(); !ok {
		return &ValidationError{Name: "release_note", err: errors.New(`ent: missing required field "BanRecord.release_note"`)}
	}
	if v, ok := brc.mutation.ReleaseNote(); ok {
		if err := banrecord.ReleaseNoteValidator(v); err != nil {
			return &ValidationError{Name: "release_note", err: fmt.Errorf(`ent: validator failed for field "BanRecord.release_note": %w`, err)}
		}
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BanRecord.created_at"`)}
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BanRecord.updated_at"`)}
	}
	if v, ok := brc.mutation.ID(); ok {
		if err := banrecord.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "BanRecord.id": %w`, err)}
		}
	}
	return nil
}

func (brc *BanRecordCreate) sqlSave(ctx context.Context) (*BanRecord, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BanRecordCreate) createSpec() (*BanRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &BanRecord{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(banrecord.Table, sqlgraph.NewFieldSpec(banrecord.FieldID, field.TypeInt64))
	)
	if id, ok := brc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := brc.mutation.UserID(); ok {
		_spec.SetField(banrecord.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := brc.mutation.BanCode(); ok {
		_spec.SetField(banrecord.FieldBanCode, field.TypeString, value)
		_node.BanCode = value
	}
	if value, ok := brc.mutation.BanNote(); ok {
		_spec.SetField(banrecord.FieldBanNote, field.TypeString, value)
		_node.BanNote = value
	}
	if value, ok := brc.mutation.ReleaseAt(); ok {
		_spec.SetField(banrecord.FieldReleaseAt, field.TypeTime, value)
		_node.ReleaseAt = &value
	}
	if value, ok := brc.mutation.ReleaseNote(); ok {
		_spec.SetField(banrecord.FieldReleaseNote, field.TypeString, value)
		_node.ReleaseNote = value
	}
	if value, ok := brc.mutation.CreatedAt(); ok {
		_spec.SetField(banrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := brc.mutation.UpdatedAt(); ok {
		_spec.SetField(banrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// BanRecordCreateBulk is the builder for creating many BanRecord entities in bulk.
type BanRecordCreateBulk struct {
	config
	err      error
	builders []*BanRecordCreate
}

// Save creates the BanRecord entities in the database.
func (brcb *BanRecordCreateBulk) Save(ctx context.Context) ([]*BanRecord, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BanRecord, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BanRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BanRecordCreateBulk) SaveX(ctx context.Context) []*BanRecord {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BanRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BanRecordCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
