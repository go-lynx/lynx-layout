// Code generated by ent, DO NOT EDIT.

package banrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the banrecord type in the database.
	Label = "ban_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBanCode holds the string denoting the ban_code field in the database.
	FieldBanCode = "ban_code"
	// FieldBanNote holds the string denoting the ban_note field in the database.
	FieldBanNote = "ban_note"
	// FieldReleaseAt holds the string denoting the release_at field in the database.
	FieldReleaseAt = "release_at"
	// FieldReleaseNote holds the string denoting the release_note field in the database.
	FieldReleaseNote = "release_note"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the banrecord in the database.
	Table = "ban_records"
)

// Columns holds all SQL columns for banrecord fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldBanCode,
	FieldBanNote,
	FieldReleaseAt,
	FieldReleaseNote,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBanCode holds the default value on creation for the "ban_code" field.
	DefaultBanCode string
	// BanCodeValidator is a validator for the "ban_code" field. It is called by the builders before save.
	BanCodeValidator func(string) error
	// DefaultBanNote holds the default value on creation for the "ban_note" field.
	DefaultBanNote string
	// BanNoteValidator is a validator for the "ban_note" field. It is called by the builders before save.
	BanNoteValidator func(string) error
	// DefaultReleaseNote holds the default value on creation for the "release_note" field.
	DefaultReleaseNote string
	// ReleaseNoteValidator is a validator for the "release_note" field. It is called by the builders before save.
	ReleaseNoteValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int64) error
)

// OrderOption defines the ordering options for the BanRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBanCode orders the results by the ban_code field.
func ByBanCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBanCode, opts...).ToFunc()
}

// ByBanNote orders the results by the ban_note field.
func ByBanNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBanNote, opts...).ToFunc()
}

// ByReleaseAt orders the results by the release_at field.
func ByReleaseAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseAt, opts...).ToFunc()
}

// ByReleaseNote orders the results by the release_note field.
func ByReleaseNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseNote, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
