// Code generated by ent, DO NOT EDIT.

package banrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/go-lynx/lynx-layout/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldUserID, v))
}

// BanCode applies equality check predicate on the "ban_code" field. It's identical to BanCodeEQ.
func BanCode(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldBanCode, v))
}

// BanNote applies equality check predicate on the "ban_note" field. It's identical to BanNoteEQ.
func BanNote(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldBanNote, v))
}

// ReleaseAt applies equality check predicate on the "release_at" field. It's identical to ReleaseAtEQ.
func ReleaseAt(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldReleaseAt, v))
}

// ReleaseNote applies equality check predicate on the "release_note" field. It's identical to ReleaseNoteEQ.
func ReleaseNote(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldReleaseNote, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldUserID, v))
}

// BanCodeEQ applies the EQ predicate on the "ban_code" field.
func BanCodeEQ(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldBanCode, v))
}

// BanCodeNEQ applies the NEQ predicate on the "ban_code" field.
func BanCodeNEQ(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldBanCode, v))
}

// BanCodeIn applies the In predicate on the "ban_code" field.
func BanCodeIn(vs ...string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldBanCode, vs...))
}

// BanCodeNotIn applies the NotIn predicate on the "ban_code" field.
func BanCodeNotIn(vs ...string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldBanCode, vs...))
}

// BanCodeGT applies the GT predicate on the "ban_code" field.
func BanCodeGT(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldBanCode, v))
}

// BanCodeGTE applies the GTE predicate on the "ban_code" field.
func BanCodeGTE(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldBanCode, v))
}

// BanCodeLT applies the LT predicate on the "ban_code" field.
func BanCodeLT(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldBanCode, v))
}

// BanCodeLTE applies the LTE predicate on the "ban_code" field.
func BanCodeLTE(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldBanCode, v))
}

// BanCodeContains applies the Contains predicate on the "ban_code" field.
func BanCodeContains(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldContains(FieldBanCode, v))
}

// BanCodeHasPrefix applies the HasPrefix predicate on the "ban_code" field.
func BanCodeHasPrefix(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldHasPrefix(FieldBanCode, v))
}

// BanCodeHasSuffix applies the HasSuffix predicate on the "ban_code" field.
func BanCodeHasSuffix(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldHasSuffix(FieldBanCode, v))
}

// BanCodeEqualFold applies the EqualFold predicate on the "ban_code" field.
func BanCodeEqualFold(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEqualFold(FieldBanCode, v))
}

// BanCodeContainsFold applies the ContainsFold predicate on the "ban_code" field.
func BanCodeContainsFold(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldContainsFold(FieldBanCode, v))
}

// BanNoteEQ applies the EQ predicate on the "ban_note" field.
func BanNoteEQ(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldBanNote, v))
}

// BanNoteNEQ applies the NEQ predicate on the "ban_note" field.
func BanNoteNEQ(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldBanNote, v))
}

// BanNoteIn applies the In predicate on the "ban_note" field.
func BanNoteIn(vs ...string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldBanNote, vs...))
}

// BanNoteNotIn applies the NotIn predicate on the "ban_note" field.
func BanNoteNotIn(vs ...string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldBanNote, vs...))
}

// BanNoteGT applies the GT predicate on the "ban_note" field.
func BanNoteGT(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldBanNote, v))
}

// BanNoteGTE applies the GTE predicate on the "ban_note" field.
func BanNoteGTE(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldBanNote, v))
}

// BanNoteLT applies the LT predicate on the "ban_note" field.
func BanNoteLT(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldBanNote, v))
}

// BanNoteLTE applies the LTE predicate on the "ban_note" field.
func BanNoteLTE(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldBanNote, v))
}

// BanNoteContains applies the Contains predicate on the "ban_note" field.
func BanNoteContains(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldContains(FieldBanNote, v))
}

// BanNoteHasPrefix applies the HasPrefix predicate on the "ban_note" field.
func BanNoteHasPrefix(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldHasPrefix(FieldBanNote, v))
}

// BanNoteHasSuffix applies the HasSuffix predicate on the "ban_note" field.
func BanNoteHasSuffix(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldHasSuffix(FieldBanNote, v))
}

// BanNoteEqualFold applies the EqualFold predicate on the "ban_note" field.
func BanNoteEqualFold(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEqualFold(FieldBanNote, v))
}

// BanNoteContainsFold applies the ContainsFold predicate on the "ban_note" field.
func BanNoteContainsFold(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldContainsFold(FieldBanNote, v))
}

// ReleaseAtEQ applies the EQ predicate on the "release_at" field.
func ReleaseAtEQ(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldReleaseAt, v))
}

// ReleaseAtNEQ applies the NEQ predicate on the "release_at" field.
func ReleaseAtNEQ(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldReleaseAt, v))
}

// ReleaseAtIn applies the In predicate on the "release_at" field.
func ReleaseAtIn(vs ...time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldReleaseAt, vs...))
}

// ReleaseAtNotIn applies the NotIn predicate on the "release_at" field.
func ReleaseAtNotIn(vs ...time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldReleaseAt, vs...))
}

// ReleaseAtGT applies the GT predicate on the "release_at" field.
func ReleaseAtGT(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldReleaseAt, v))
}

// ReleaseAtGTE applies the GTE predicate on the "release_at" field.
func ReleaseAtGTE(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldReleaseAt, v))
}

// ReleaseAtLT applies the LT predicate on the "release_at" field.
func ReleaseAtLT(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldReleaseAt, v))
}

// ReleaseAtLTE applies the LTE predicate on the "release_at" field.
func ReleaseAtLTE(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldReleaseAt, v))
}

// ReleaseNoteEQ applies the EQ predicate on the "release_note" field.
func ReleaseNoteEQ(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldReleaseNote, v))
}

// ReleaseNoteNEQ applies the NEQ predicate on the "release_note" field.
func ReleaseNoteNEQ(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldReleaseNote, v))
}

// ReleaseNoteIn applies the In predicate on the "release_note" field.
func ReleaseNoteIn(vs ...string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldReleaseNote, vs...))
}

// ReleaseNoteNotIn applies the NotIn predicate on the "release_note" field.
func ReleaseNoteNotIn(vs ...string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldReleaseNote, vs...))
}

// ReleaseNoteGT applies the GT predicate on the "release_note" field.
func ReleaseNoteGT(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldReleaseNote, v))
}

// ReleaseNoteGTE applies the GTE predicate on the "release_note" field.
func ReleaseNoteGTE(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldReleaseNote, v))
}

// ReleaseNoteLT applies the LT predicate on the "release_note" field.
func ReleaseNoteLT(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldReleaseNote, v))
}

// ReleaseNoteLTE applies the LTE predicate on the "release_note" field.
func ReleaseNoteLTE(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldReleaseNote, v))
}

// ReleaseNoteContains applies the Contains predicate on the "release_note" field.
func ReleaseNoteContains(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldContains(FieldReleaseNote, v))
}

// ReleaseNoteHasPrefix applies the HasPrefix predicate on the "release_note" field.
func ReleaseNoteHasPrefix(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldHasPrefix(FieldReleaseNote, v))
}

// ReleaseNoteHasSuffix applies the HasSuffix predicate on the "release_note" field.
func ReleaseNoteHasSuffix(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldHasSuffix(FieldReleaseNote, v))
}

// ReleaseNoteEqualFold applies the EqualFold predicate on the "release_note" field.
func ReleaseNoteEqualFold(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEqualFold(FieldReleaseNote, v))
}

// ReleaseNoteContainsFold applies the ContainsFold predicate on the "release_note" field.
func ReleaseNoteContainsFold(v string) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldContainsFold(FieldReleaseNote, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BanRecord {
	return predicate.BanRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BanRecord) predicate.BanRecord {
	return predicate.BanRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BanRecord) predicate.BanRecord {
	return predicate.BanRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BanRecord) predicate.BanRecord {
	return predicate.BanRecord(sql.NotPredicates(p))
}
