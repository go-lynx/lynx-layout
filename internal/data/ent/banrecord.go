// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/go-lynx/lynx-layout/internal/data/ent/banrecord"
)

// 用户封禁记录表
type BanRecord struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID int64 `json:"id,omitempty"`
	// 用户ID
	UserID int64 `json:"user_id,omitempty"`
	// 封禁类型
	BanCode string `json:"ban_code,omitempty"`
	// 封禁原因
	BanNote string `json:"ban_note,omitempty"`
	// 解封时间
	ReleaseAt *time.Time `json:"release_at,omitempty"`
	// 解封原因
	ReleaseNote string `json:"release_note,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 修改时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BanRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case banrecord.FieldID, banrecord.FieldUserID:
			values[i] = new(sql.NullInt64)
		case banrecord.FieldBanCode, banrecord.FieldBanNote, banrecord.FieldReleaseNote:
			values[i] = new(sql.NullString)
		case banrecord.FieldReleaseAt, banrecord.FieldCreatedAt, banrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BanRecord fields.
func (br *BanRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case banrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			br.ID = int64(value.Int64)
		case banrecord.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				br.UserID = value.Int64
			}
		case banrecord.FieldBanCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ban_code", values[i])
			} else if value.Valid {
				br.BanCode = value.String
			}
		case banrecord.FieldBanNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ban_note", values[i])
			} else if value.Valid {
				br.BanNote = value.String
			}
		case banrecord.FieldReleaseAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field release_at", values[i])
			} else if value.Valid {
				br.ReleaseAt = new(time.Time)
				*br.ReleaseAt = value.Time
			}
		case banrecord.FieldReleaseNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_note", values[i])
			} else if value.Valid {
				br.ReleaseNote = value.String
			}
		case banrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				br.CreatedAt = value.Time
			}
		case banrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				br.UpdatedAt = value.Time
			}
		default:
			br.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BanRecord.
// This includes values selected through modifiers, order, etc.
func (br *BanRecord) Value(name string) (ent.Value, error) {
	return br.selectValues.Get(name)
}

// Update returns a builder for updating this BanRecord.
// Note that you need to call BanRecord.Unwrap() before calling this method if this BanRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (br *BanRecord) Update() *BanRecordUpdateOne {
	return NewBanRecordClient(br.config).UpdateOne(br)
}

// Unwrap unwraps the BanRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (br *BanRecord) Unwrap() *BanRecord {
	_tx, ok := br.config.driver.(*txDriver)
	if !ok {
		panic("ent: BanRecord is not a transactional entity")
	}
	br.config.driver = _tx.drv
	return br
}

// String implements the fmt.Stringer.
func (br *BanRecord) String() string {
	var builder strings.Builder
	builder.WriteString("BanRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", br.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", br.UserID))
	builder.WriteString(", ")
	builder.WriteString("ban_code=")
	builder.WriteString(br.BanCode)
	builder.WriteString(", ")
	builder.WriteString("ban_note=")
	builder.WriteString(br.BanNote)
	builder.WriteString(", ")
	if v := br.ReleaseAt; v != nil {
		builder.WriteString("release_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("release_note=")
	builder.WriteString(br.ReleaseNote)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(br.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(br.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BanRecords is a parsable slice of BanRecord.
type BanRecords []*BanRecord
